openapi: 3.0.0
info:
  title: Smart Seminarian API
  description: API for the Smart Seminarian project to help users train basic C programming skills.
  version: 0.0.1

paths:
  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /version:
    get:
      summary: Get service version
      responses:
        '200':
          description: Service version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profile:
    get:
      summary: Get user profile
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recommendation:
    get:
      summary: Get next concept recommendation
      responses:
        '200':
          description: Recommended concept
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recommendation'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /concept/{name}:
    get:
      summary: Get concept description
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Concept details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concept'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /problem:
    get:
      summary: Get problem to solve
      responses:
        '200':
          description: Problem details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /solution:
    post:
      summary: Submit solution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionSubmission'
      responses:
        '200':
          description: Solution submission response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /explanation/{type}:
    get:
      summary: Get additional explanation
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [concept, problem, compilation, autoGrading]
        - name: reference
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Explanation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Explanation'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /feedback:
    post:
      summary: Provide feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        '200':
          description: Feedback submission response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    UserProfile:
      type: object
      properties:
        username:
          type: string
        trainingData:
          type: array
          items:
            $ref: '#/components/schemas/TrainingData'

    TrainingData:
      type: object
      properties:
        concept:
          type: string
        status:
          type: string

    Recommendation:
      type: object
      properties:
        concept:
          type: string

    Concept:
      type: object
      properties:
        name:
          type: string
        motivation:
          type: string
        description:
          type: string
        example:
          type: string
        links:
          type: array
          items:
            type: string
        analogies:
          type: string

    Problem:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        exampleInput:
          type: string
        exampleOutput:
          type: string

    SolutionSubmission:
      type: object
      properties:
        problemId:
          type: string
        solutionCode:
          type: string
      required:
        - problemId
        - solutionCode

    SolutionResponse:
      type: object
      properties:
        feedback:
          type: string

    Explanation:
      type: object
      properties:
        explanation:
          type: string

    Feedback:
      type: object
      properties:
        type:
          type: string
        content:
          type: string
      required:
        - type
        - content

    FeedbackResponse:
      type: object
      properties:
        status:
          type: string

    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer

    Version:
        type: object
        properties:
            api_version:
              type: string
            build_info:
              type: string
